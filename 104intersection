#!/usr/bin/python3

import sys
import math

def help_me() :

    print("USAGE\n"
       "    ./104intersection opt xp yp zp xv yv zv p\n\n"
       "DESCRIPTION\n"
       "    opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone\n"
       "    (xp, yp, zp)    coordinates of a point by which the light ray passes through\n"
       "    (xv, yv, zv)    coordinates of a vector parallel to the light ray\n"
       "    p               parameter: radius of the sphere, radius of the cylinder, or angle formed by the cone and the Z-axis\n");

def try_except() :

    try :
        opt = int(sys.argv[1])
        xp = int(sys.argv[2])
        yp = int(sys.argv[3])
        zp = int(sys.argv[4])
        xv = int(sys.argv[5])
        yv = int(sys.argv[6])
        zv = int(sys.argv[7])
        p = int(sys.argv[8])

    except :
        sys.exit(84)

    choice_opt(opt, xp, yp, zp, xv, yv, zv, p)

def choice_opt(opt, xp, yp, zp, xv, yv, zv, p) :

    if (opt == 1) :
        sphere(xp, yp, zp, xv, yv, zv, p)
        sphere_points(xp, yp, zp, xv, yv, zv, p)
    if (opt == 2) :
        cylinder(xp, yp, zp, xv, yv, zv, p)
        cylinder_points(xp, yp, zp, xv, yv, zv, p)
    if (opt == 3) :
        cone(xp, yp, zp, xv, yv, zv, p)
        cone_points(xp, yp, zp, xv, yv, zv, p)

def sphere(xp, yp, zp, xv, yv, zv, p) :

    print ("Sphere of radius ", p, sep = "")
    print ("Line passing through the point (", xp,", ", yp,", ", zp,") and parallel to the vector (", xv,", ", yv,", ", zv, ")", sep = "")

def sphere_points(xp, yp, zp, xv, yv, zv, p) :

    a = math.pow(xv,2) + math.pow(yv,2) + math.pow(zv,2)
    b = 2 * ((xp * xv) + (yp * yv) + (zp * zv))
    c = math.pow(xp, 2) + math.pow(yp, 2) + math.pow(zp, 2) - math.pow(p, 2)
    delta = math.pow(b, 2) - 4 * a * c
    check_delta_sphere(xp, yp, zp, xv, yv, zv, p, a, b, c, delta)

def check_delta_sphere(xp, yp, zp, xv, yv, zv, p, a, b, c, delta) :

    if (delta < 0) :
        print("No intersection point.")
        return 0
    if (delta == 0) :
        print("1 intersection point:")
        u = -b/(2 * a)
        x_intersection = xp + u * xv
        y_intersection = yp + u * yv
        z_intersection = zp + u * zv
        print("(%.3f"%x_intersection,", %.3f"%y_intersection,", %.3f"%z_intersection,")",sep = "")
        return 0

def cylinder(xp, yp, zp, xv, yv, zv, p) :

    print ("Cylinder of radius ", p, sep = "")
    print ("Line passing through the point (", xp,", ", yp,", ", zp,") and parallel to the vector (", xv,", ", yv,", ", zv, ")", sep = "")

def cylinder_points(xp, yp, zp, xv, yv, zv, p) :

    a = math.pow(xv,2) + math.pow(yv,2)
    b = 2 * xp * xv + 2 * yp * yv
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(p,2)
    delta = math.pow(b, 2) - 4 * a * c
    check_cylinder_points(xp, yp, zp, xv, yv, zv, p, a, b, c)
    check_delta_cylinder(xp, yp, zp, xv, yv, zv, p, a, b, c, delta)

def check_cylinder_points(xp, yp, zp, xv, yv, zv, p, a, b, c) :

    if (a == 0) :
        if (c == 0) :
            print("There is an infinite number of intersection points.")
            sys.exit(84)
        else :
            print("No intersection point.")
            sys.exit(84)

def check_delta_cylinder(xp, yp, zp, xv, yv, zv, p, a, b, c, delta) :

    if (delta < 0) :
        print("No intersection point.")
        return 0
    if (delta == 0) :
        print("1 intersection point:")
        u = -b/(2 * a)
        x_intersection = xp + u * xv
        y_intersection = yp + u * yv
        z_intersection = zp + u * zv
        print("(%.3f"%x_intersection,", %.3f"%y_intersection,", %.3f"%z_intersection,")",sep = "")
        return 0

def cone(xp, yp, zp, xv, yv, zv, p) :

    print ("Cone with a", p,"degree angle")
    print ("Line passing through the point (", xp,", ", yp,", ", zp,") and parallel to the vector (", xv,", ", yv,", ", zv, ")", sep = "")

def cone_points(xp, yp, zp, xv, yv, zv, p) :

    p = math.radians(p)
    a = math.pow(xv,2) + math.pow(yv,2) - math.pow((zv * math.tan(p)), 2)
    b = 2 * xp * xv + 2 * yp * yv - 2 * zp * zv * math.pow(math.tan(p), 2)
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(zp,2) * math.pow(math.tan(p),2)
    delta = math.pow(b,2) - 4 * a * c
    check_cone_points(xp, yp, zp, xv, yv, zv, p, a, b, c)
    check_delta_cone(xp, yp, zp, xv, yv, zv, p, a, b, c, delta)

def check_cone_points(xp, yp, zp, xv, yv, zv, p, a, b, c) :

    if (a == 0) :
        if (b == 0) :
            if (c == 0) :
                print("There is an infinite number of intersection points.")
                sys.exit(84)
            else :
                print("No intersection point.")
                sys.exit(84)

def check_delta_cone(xp, yp, zp, xv, yv, zv, p, a, b, c, delta) :

    if (delta < 0) :
        print("No intersection point.")
        return 0
    if (delta == 0) :
        print("1 intersection point:")
        u = -b/(2 * a)
        x_intersection = xp + u * xv
        y_intersection = yp + u * yv
        z_intersection = zp + u * zv
        print("(%.3f"%x_intersection,", %.3f"%y_intersection,", %.3f"%z_intersection,")",sep = "")
        return 0

def main() :

    if len(sys.argv) < 2  :
        sys.exit(84)
    if sys.argv[1] == "-h" :
        help_me()
    if len(sys.argv) != 9 :
        sys.exit(84)
    if len(sys.argv) == 9 :
        try_except()
main()
